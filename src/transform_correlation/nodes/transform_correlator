#!/usr/bin/env python
import rospy
import tf2_ros
import yaml

def find_frames(tf_buffer, prefix):
    frames = tfBuffer.all_frames_as_yaml()
    frames = yaml.load(frames)

    target_frames = []

    for k,v in frames.items():
        if prefix in k:
            target_frames.append(k)

    return target_frames

def correlate_frames(frames_one, frames_two, tfbuffer):
    correlations = {}
    for f1 in frames_one:
        min_error = float("inf")
        for f2 in frames_two:
            f1_to_f2 = tfBuffer.lookup_transform(f1, f2, rospy.Time())
            trans = f1_to_f2.transform.translation
            error = trans.x ** 2 + trans.y ** 2
            if error < min_error:
                min_error = error
                correlations[f1] = f2

    return correlations


if __name__ == '__main__':
    rospy.init_node('pheromone_sensor')

    tfBuffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(tfBuffer)


    rate = rospy.Rate(1)
    while not rospy.is_shutdown():
        uwb_frames = find_frames(tfBuffer, "loc_system_uwb/target")
        whycon_frames = find_frames(tfBuffer, "loc_system_whycon/target")
        correlations = correlate_frames(whycon_frames, uwb_frames, tfBuffer)
        print(correlations)
        rate.sleep()

