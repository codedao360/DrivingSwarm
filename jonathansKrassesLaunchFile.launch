<launch>
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="first_tb3"  default="tb3_0"/>
  <arg name="second_tb3" default="tb3_1"/>
  <arg name="third_tb3"  default="tb3_2"/>

  <arg name="first_tb3_x_pos" default="-0.5"/>
  <arg name="first_tb3_y_pos" default="-0.5"/>
  <arg name="first_tb3_z_pos" default=" 0.0"/>
  <arg name="first_tb3_yaw"   default=" 0.0"/>

  <arg name="second_tb3_x_pos" default=" 0.5"/>
  <arg name="second_tb3_y_pos" default=" 0.5"/>
  <arg name="second_tb3_z_pos" default=" 0.0"/>
  <arg name="second_tb3_yaw"   default=" 0.0"/>

  <arg name="third_tb3_x_pos" default=" 0.5"/>
  <arg name="third_tb3_y_pos" default=" -0.5"/>
  <arg name="third_tb3_z_pos" default=" 0.0"/>
  <arg name="third_tb3_yaw"   default=" 0.0"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_world.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>  

  <group ns = "$(arg first_tb3)">
    <node pkg="tf" type="static_transform_publisher" name="$(anon foo)" args="0 0 0 0 0 0 /world $(arg first_tb3)/map 100"/>
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg first_tb3)" />
    </node>
    
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg first_tb3) -x $(arg first_tb3_x_pos) -y $(arg first_tb3_y_pos) -z $(arg first_tb3_z_pos) -Y $(arg first_tb3_yaw) -param robot_description" />
  </group>

  <group ns = "$(arg second_tb3)">
    <node pkg="tf" type="static_transform_publisher" name="$(anon foo)" args="0 0 0 0 0 0 /world $(arg second_tb3)/map 100"/>
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg second_tb3)" />
    </node>

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg second_tb3) -x $(arg second_tb3_x_pos) -y $(arg second_tb3_y_pos) -z $(arg second_tb3_z_pos) -Y $(arg second_tb3_yaw) -param robot_description" />
  </group>

  <group ns = "$(arg third_tb3)">
    <node pkg="tf" type="static_transform_publisher" name="$(anon foo)" args="0 0 0 0 0 0 /world $(arg third_tb3)/map 100"/>
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg third_tb3)" />
    </node>

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg third_tb3) -x $(arg third_tb3_x_pos) -y $(arg third_tb3_y_pos) -z $(arg third_tb3_z_pos) -Y $(arg third_tb3_yaw) -param robot_description" />
  </group>
  
  <group ns = "$(arg first_tb3)">
    <include file="$(find turtlebot3_slam)/launch/turtlebot3_gmapping.launch">
	<arg name="set_base_frame" value="$(arg first_tb3)/base_footprint" />
    	<arg name="set_odom_frame" value="$(arg first_tb3)/odom" />
	<arg name="set_map_frame" value="$(arg first_tb3)/map" />
    </include>
  </group>


  <group ns = "$(arg second_tb3)">
    <include file="$(find turtlebot3_slam)/launch/turtlebot3_gmapping.launch">
	<arg name="set_base_frame" value="$(arg second_tb3)/base_footprint" />
    	<arg name="set_odom_frame" value="$(arg second_tb3)/odom" />
    	<arg name="set_map_frame" value="$(arg second_tb3)/map" />
    </include>
  </group>


  <group ns = "$(arg third_tb3)">
    <include file="$(find turtlebot3_slam)/launch/turtlebot3_gmapping.launch">
	<arg name="set_base_frame" value="$(arg third_tb3)/base_footprint" />
    	<arg name="set_odom_frame" value="$(arg third_tb3)/odom" />
    	<arg name="set_map_frame" value="$(arg third_tb3)/map" />
    </include>
  </group>



  <group ns = "$(arg first_tb3)">
    <arg name="move_forward_only" default="false"/>
    <arg name="robot_name" value="$(arg first_tb3)"/>
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    	<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    	<rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
    	<rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
    	<rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load" />
    	<rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load" />
    	<rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load" />
    	<rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
   	

	<remap from="/map" to="/$(arg robot_name)/map"/>
        <param name="global_costmap/obstacle_layer/scan/sensor_frame" value="$(arg robot_name)/base_scan" />
        <param name="global_costmap/obstacle_layer/scan/topic" value="/$(arg robot_name)/scan" />
        <param name="global_costmap/robot_base_frame" value="$(arg robot_name)/base_footprint" />
        <param name="global_costmap/global_frame" value="$(arg robot_name)/map" />
        <param name="local_costmap/obstacle_layer/scan/sensor_frame" value="$(arg robot_name)/base_scan" />
        <param name="local_costmap/obstacle_layer/scan/topic" value="/$(arg robot_name)/scan" />
        <param name="local_costmap/robot_base_frame" value="$(arg robot_name)/base_footprint" />
        <param name="local_costmap/global_frame" value="$(arg robot_name)/odom" />

        <remap from="odom" to="/$(arg robot_name)/odom"/>
        <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
    </node>
  </group>
  <group ns = "$(arg second_tb3)">
    <arg name="move_forward_only" default="false"/>
    <arg name="robot_name" value="$(arg second_tb3)"/>
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    	<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    	<rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
    	<rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
    	<rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load" />
    	<rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load" />
    	<rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load" />
    	<rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
   	

	<remap from="/map" to="/$(arg robot_name)/map"/>
        <param name="global_costmap/obstacle_layer/scan/sensor_frame" value="$(arg robot_name)/base_scan" />
        <param name="global_costmap/obstacle_layer/scan/topic" value="/$(arg robot_name)/scan" />
        <param name="global_costmap/robot_base_frame" value="$(arg robot_name)/base_footprint" />
        <param name="global_costmap/global_frame" value="$(arg robot_name)/map" />
        <param name="local_costmap/obstacle_layer/scan/sensor_frame" value="$(arg robot_name)/base_scan" />
        <param name="local_costmap/obstacle_layer/scan/topic" value="/$(arg robot_name)/scan" />
        <param name="local_costmap/robot_base_frame" value="$(arg robot_name)/base_footprint" />
        <param name="local_costmap/global_frame" value="$(arg robot_name)/odom" />

        <remap from="odom" to="/$(arg robot_name)/odom"/>
        <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
    </node>
  </group>
  <group ns = "$(arg third_tb3)">
    <arg name="move_forward_only" default="false"/>
    <arg name="robot_name" value="$(arg third_tb3)"/>
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    	<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    	<rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
    	<rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
    	<rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load" />
    	<rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load" />
    	<rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load" />
    	<rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
   	

	<remap from="/map" to="/$(arg robot_name)/map"/>
        <param name="global_costmap/obstacle_layer/scan/sensor_frame" value="$(arg robot_name)/base_scan" />
        <param name="global_costmap/obstacle_layer/scan/topic" value="/$(arg robot_name)/scan" />
        <param name="global_costmap/robot_base_frame" value="$(arg robot_name)/base_footprint" />
        <param name="global_costmap/global_frame" value="$(arg robot_name)/map" />
        <param name="local_costmap/obstacle_layer/scan/sensor_frame" value="$(arg robot_name)/base_scan" />
        <param name="local_costmap/obstacle_layer/scan/topic" value="/$(arg robot_name)/scan" />
        <param name="local_costmap/robot_base_frame" value="$(arg robot_name)/base_footprint" />
        <param name="local_costmap/global_frame" value="$(arg robot_name)/odom" />

        <remap from="odom" to="/$(arg robot_name)/odom"/>
        <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
    </node>
  </group>
</launch>
